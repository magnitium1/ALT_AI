#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API AltAI
"""

import requests
import json
import time

BASE_URL = "http://localhost:8070"

def test_register():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üß™ –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    
    data = {
        "username": "testuser",
        "password": "testpass123"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/register", json=data)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.json()}")
        return response.status_code == 201
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def test_login():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    print("\nüîë –¢–µ—Å—Ç –≤—Ö–æ–¥–∞...")
    
    data = {
        "username": "testuser",
        "password": "testpass123"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/login", json=data)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        result = response.json()
        print(f"–û—Ç–≤–µ—Ç: {result}")
        
        if response.status_code == 200 and "token" in result:
            return result["token"]
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None

def test_model_request(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AI –º–æ–¥–µ–ª–∏"""
    print("\nü§ñ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ AI –º–æ–¥–µ–ª–∏...")
    
    if not token:
        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    data = {
        "request": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    }
    
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/request_to_model", json=data, headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AltAI API")
    print("=" * 40)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(3)
    
    # –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if test_register():
        print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return
    
    # –¢–µ—Å—Ç 2: –í—Ö–æ–¥
    token = test_login()
    if token:
        print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è")
        return
    
    # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    if test_model_request(token):
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –∫ AI –º–æ–¥–µ–ª–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –ó–∞–ø—Ä–æ—Å –∫ AI –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª—Å—è")
    
    print("\n" + "=" * 40)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()

